cc_test(
    name = "c11_feature_test",
    srcs = ["c11.c"],
    features = ["c11"],
    copts = select({
        "@platforms//os:windows": [], 
        "//conditions:default": [
            "-pedantic",
            "-Werror=pedantic",
        ],
    }),
    target_compatible_with = select({
        "@platforms//os:windows": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
)

cc_test(
    name = "c17_feature_test",
    srcs = ["c17.c"],
    features = ["c17"],
)

cc_test(
    name = "c23_feature_test",
    srcs = ["c23.c"],
    features = ["c2x"],
    copts = select({
        "@platforms//os:windows": [], 
        "//conditions:default": [
            "-pedantic",
            "-Werror=pedantic",
        ],
    }),
    target_compatible_with = select({
        "@platforms//os:windows": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
)

cc_test(
    name = "c++98_feature_test",
    srcs = ["c++98.cc"],
    features = ["c++98"],
    copts = select({
        "@platforms//os:windows": [], 
        "//conditions:default": [
            "-Werror=deprecated-declarations",
        ],
    }),
)

cc_test(
    name = "c++14_feature_test",
    srcs = ["c++14.cc"],
    features = ["c++14"],
)

cc_test(
    name = "c++17_feature_test",
    srcs = ["c++17.cc"],
    features = ["c++17"],
)

cc_test(
    name = "c++20_feature_test",
    srcs = ["c++20.cc"],
    features = ["c++20"],
)

# requires gcc-12, clang-16, or vs2022
cc_test(
    name = "c++23_feature_test",
    srcs = ["c++23.cc"],
    features = ["c++2b"],
    tags = ["manual"],
)

cc_test(
    name = "gnu11_feature_test",
    srcs = ["gnu11.c"],
    features = [
        "c11",
        "gnu_extensions",
    ],
    copts = [
#        "-pedantic",
#        "-Werror=pedantic",
    ],
    target_compatible_with = select({
        "@platforms//os:windows": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
)

cc_test(
    name = "gnu17_feature_test",
    srcs = ["gnu17.c"],
    features = [
        "c17",
        "gnu_extensions",
    ],
    target_compatible_with = select({
        "@platforms//os:windows": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
)

cc_test(
    name = "gnu23_feature_test",
    srcs = ["gnu23.c"],
    features = [
        "c2x",
        "gnu_extensions",
    ],
    copts = [
#        "-pedantic",
#        "-Werror=pedantic",
    ],
    target_compatible_with = select({
        "@platforms//os:windows": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
)

cc_test(
    name = "gnu++98_feature_test",
    srcs = ["gnu++98.cc"],
    features = [
        "c++98",
        "gnu_extensions",
    ],
    copts = ["-Werror=deprecated-declarations"],
    target_compatible_with = select({
        "@platforms//os:windows": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
)

cc_test(
    name = "gnu++14_feature_test",
    srcs = ["gnu++14.cc"],
    features = [
        "c++14",
        "gnu_extensions",
    ],
    target_compatible_with = select({
        "@platforms//os:windows": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
)

cc_test(
    name = "gnu++17_feature_test",
    srcs = ["gnu++17.cc"],
    features = [
        "c++17",
        "gnu_extensions",
    ],
    target_compatible_with = select({
        "@platforms//os:windows": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
)

cc_test(
    name = "gnu++20_feature_test",
    srcs = ["gnu++20.cc"],
    features = [
        "c++20",
        "gnu_extensions",
    ],
    target_compatible_with = select({
        "@platforms//os:windows": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
)

# requires gcc-12, clang-16, or vs2022
cc_test(
    name = "gnu++23_feature_test",
    srcs = ["gnu++23.cc"],
    features = [
        "c++2b",
        "gnu_extensions",
    ],
    tags = ["manual"],
    target_compatible_with = select({
        "@platforms//os:windows": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
)

